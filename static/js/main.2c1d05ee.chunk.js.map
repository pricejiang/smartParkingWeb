{"version":3,"sources":["Components/firebase-init.js","Components/Home.js","Components/MyMeter.js","Components/Settings.js","App.js","serviceWorker.js","index.js","map.png"],"names":["fb","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","Home","state","slots","slotSelectedId","selectSlotbyId","slotId","setState","collection","get","then","snapshot","data","docs","map","doc","this","slotSelected","filter","slot","slotElements","forEach","push","key","Segment","attached","id","Icon","name","Card","color","Image","src","mapImage","Content","Header","Meta","className","Description","Component","Position","usePosition","latitude","longitude","Label","SlotCard","props","onClick","MyMeter","plate","time","getTime","start_time","tempTime","Date","seconds","getHours","getMinutes","getSeconds","Number","slice","hour","String","Math","floor","padStart","minute","second","calculateFee","toFixed","user","firebase","auth","currentUser","console","log","uid","timeString","fee","Settings","SignInScreen","uiConfig","signInFlow","signInSuccessUrl","signInOptions","EmailAuthProvider","PROVIDER_ID","callbacks","firebaseAuth","SignUpView","onSubmit","type","placeholder","SignUpScreen","signedUp","handleSignUp","event","a","preventDefault","target","elements","number","email","password","createUserWithEmailAndPassword","value","set","emailVertified","error","alert","to","PrivateRoute","children","rest","render","pathname","Navigation","loading","authenticated","logOutUser","signOut","onAuthStateChanged","Menu","inverted","pointing","Item","as","Link","position","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2c1d05ee.chunk.js","sourcesContent":["import fb from 'firebase';\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAZ7kVfUkG6D-04t4Io8F2OwzZwNRhtb5M\",\n    authDomain: \"ismart-parking-meter.firebaseapp.com\",\n    databaseURL: \"https://ismart-parking-meter.firebaseio.com\",\n    projectId: \"ismart-parking-meter\",\n    storageBucket: \"ismart-parking-meter.appspot.com\",\n    messagingSenderId: \"860777835594\",\n    appId: \"1:860777835594:web:b8064ab97e365a9a840ab3\",\n    measurementId: \"G-9Y20CKPN4K\"\n};\n\nfb.initializeApp(firebaseConfig);\nvar db = fb.firestore();\nexport { fb,db };\n","import React , { Component } from 'react';\nimport { Segment, Card, Icon,Label,Image} from 'semantic-ui-react';\nimport { usePosition } from 'use-position';\nimport mapImage from \"../map.png\";\nimport { db } from \"./firebase-init\"\n\nexport default class Home extends Component{\n    state = {\n        slots: [],\n        slotSelectedId: 'slot1'\n    }\n    componentDidMount(){\n        db.collection('slots').get().then(snapshot => {\n            const data = snapshot.docs.map(doc => doc.data());\n            this.setState({slots: data});\n        });\n    }\n    selectSlotbyId = (slotId) => {\n        this.setState({slotSelectedId:slotId});\n    }\n    \n    render() {\n        const {slots, slotSelectedId} = this.state;\n        const slotSelected = slots.filter((slot)=> slot[\"id\"] === slotSelectedId)[0];\n        let slotElements = [];\n        slots.forEach((slot) => {\n            slotElements.push(<SlotCard key={slot[\"id\"]} slot={slot} selectSlotbyId={this.selectSlotbyId}/>);\n        })\n        return (\n            <Segment attached id=\"home\">\n                <div id=\"my-location\">\n                    <Icon name='location arrow' />\n                    <Position></Position>\n                </div>\n                <div id=\"slot-info\">\n                    <div id=\"slots\"> \n                        {slotElements}\n                    </div>\n                    <div id=\"slot-detail\">\n                        {slots && slotSelected && <Card color={slotSelected[\"availability\"] === 1? \"green\": \"red\"}>\n                            <Image src={mapImage}></Image>\n                            <Card.Content>\n                                <Card.Header><Icon name='product hunt'/>{slotSelected[\"id\"]}</Card.Header>\n                                <Card.Meta>\n                                    <span className='location'>{\"lat: \" + slotSelected[\"location\"][\"lat\"]+ \", lng: \"+slotSelected[\"location\"][\"lng\"]}</span>\n                                </Card.Meta>\n                                <Card.Description>\n                                    Availability: {slotSelected[\"availability\"] === 1? \"Empty\": \"Occuppied\"}\n                                </Card.Description>\n                            </Card.Content>\n                        </Card>\n                        }\n                    </div>\n                </div>\n            </Segment>\n        )\n    }\n  \n}\n\n\nconst Position = () => {\n    const { latitude, longitude} = usePosition();\n    return (\n        <>\n            <Label>{latitude}</Label> <Label>{longitude}</Label>  \n        </>\n    );\n}\n\nconst SlotCard = (props) => {\n    \n    return (\n        <Card onClick={() => props.selectSlotbyId(props.slot[\"id\"])} color={props.slot[\"availability\"] === 1? \"green\": \"red\"}>\n            <Card.Content>\n            <Card.Header><Icon name='product hunt' />{props.slot[\"id\"]}</Card.Header>\n            <Card.Meta>\n                <span className='location'>{\"lat: \" + props.slot[\"location\"][\"lat\"]+ \", lng: \"+props.slot[\"location\"][\"lng\"]}</span>\n            </Card.Meta>\n            \n            </Card.Content>\n        </Card>\n    )\n}","import React , { Component } from 'react';\nimport { Segment, Card, Image, Icon} from 'semantic-ui-react';\nimport mapImage from \"../map.png\"\nimport { db } from \"./firebase-init\"\nimport firebase from \"firebase\";\n\nexport default class MyMeter extends Component{\n    state={\n        slots: [],\n        plate: null,\n        time: 0\n    }\n\n    componentDidMount(){\n        let user = firebase.auth().currentUser;\n        console.log(user);\n        console.log(user.uid);\n        db.collection('users').doc(user.uid).get().then(snapshot => {\n            const data = snapshot.data();\n            this.setState({plate: data['plate']})\n        });\n        db.collection('slots').get().then(snapshot => {\n            const data = snapshot.docs.map(doc => doc.data());\n            this.setState({slots: data});\n        });\n    }\n\n    getTime = (slot) => {\n        if (slot){\n            var start_time = slot['start_time']\n            var tempTime = new Date();\n            var currentSeconds = (tempTime.getHours()*3600 + tempTime.getMinutes()*60 + tempTime.getSeconds());\n            var startSeconds = Number(start_time.slice(0, 2))*3600 + Number(start_time.slice(3, 5))*60 + Number(start_time.slice(6, 8));\n            var seconds = currentSeconds - startSeconds;\n            const hour = String(Math.floor(seconds / 3600)).padStart(2,'0');\n            const minute = String(Math.floor(seconds % 3600 / 60)).padStart(2,'0');\n            const second= String(Math.floor(seconds % 3600 % 60)).padStart(2,'0');\n            return `${hour}:${minute}:${second}`;\n        } \n        else{\n            return '00:00:00'\n        }       \n    }\n\n    calculateFee = (time) => {\n        var hour = Number(time.slice(0, 2));\n        var minute = Number(time.slice(3, 5));\n        var second = Number(time.slice(6, 8));\n        var seconds = hour*3600 + minute*60 + second;\n        \n        const rate = 0.002;\n        return (rate * seconds).toFixed(2)\n    }\n   \n\n    render() {\n        const {slots, plate} = this.state;\n        const slotSelected = slots.filter((slot) => slot['plate'] === plate)[0];\n        const timeString = this.getTime(slotSelected);\n        const fee = this.calculateFee(timeString);\n        // console.log(plate);\n        return (\n            <Segment attached id=\"my-meter\">\n                <div id=\"slot-detail\">\n                    { slotSelected && <Card color={slotSelected[\"availability\"] === 1? \"green\": \"red\"}>\n                        <Image src={mapImage}></Image>\n                        <Card.Content>\n                            <Card.Header><Icon name='product hunt'/>{slotSelected[\"id\"]}</Card.Header>\n                            <Card.Meta>\n                                <span className='location'>{\"lat: \" + slotSelected[\"location\"][\"lat\"]+ \", lng: \"+slotSelected[\"location\"][\"lng\"]}</span>\n                            </Card.Meta>\n                            <Card.Description>\n                                <p>Parking Time: {timeString}</p>\n                                <p>Fee: ${fee}</p>\n                                <p>Plate Number: {plate}</p>\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                    }\n                </div>\n            </Segment>\n        )\n    }\n  \n}\n\n\n","import React , { Component } from 'react';\n\nimport { Segment } from 'semantic-ui-react';\n\nexport default class Settings extends Component{\n    render() {\n     \n      return (\n        <Segment attached >\n            Settings\n        </Segment>\n      )\n    }\n  \n}\n\n","import React , { Component } from 'react';\nimport './App.css';\nimport {Menu} from 'semantic-ui-react';\nimport Home from './Components/Home';\nimport MyMeter from './Components/MyMeter';\nimport Settings from './Components/Settings';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect\n } from \"react-router-dom\";\n\nimport firebase, { app } from 'firebase';\nimport { db } from \"./Components/firebase-init\"\n\n\n\nclass SignInScreen extends Component{\n    // Configure FirebaseUI.\n    uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you ca n provide a callbacks.signInSuccess function.\n        signInSuccessUrl: '/',\n        'credentialHelper': 'none',\n        // We will display Google and Facebook as auth providers.\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n            //   this.props.setUser(firebase.auth().currentUser);\n            //   return true;\n            // }.bind(this)\n        }\n    }\n\n    render(){\n        return (\n            <div id=\"sign_in\">\n                <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()}/>\n            </div>\n        );\n    }\n    \n}\n\nconst SignUpView = ({ onSubmit }) => {\n    return (\n      <div>\n        <h1>Sign up</h1>\n        <form onSubmit={onSubmit}>\n            <label>\n            Name\n            <input\n              name=\"name\"\n              type=\"name\"\n              placeholder=\"Name\"\n            />\n          </label>\n          <label>\n            License Plate\n            <input\n              name=\"number\"\n              type=\"text\"\n              placeholder=\"Number\"\n            />\n          </label>\n          <label>\n            Email\n            <input\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n            />\n          </label>\n          <label>\n            Password\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </label>\n          <button type=\"submit\">Sign Up</button>\n        </form>\n      </div>\n    );\n};\n\nclass SignUpScreen extends Component {\n    state = {\n        signedUp: null\n    }\n    handleSignUp = async event => {\n        event.preventDefault();\n        const { name,number,email, password } = event.target.elements;\n        try{\n            firebase.auth().createUserWithEmailAndPassword(email.value, password.value).then(() => {\n                let uid = firebase.auth().currentUser.uid;\n                if (uid != null){\n                    console.log(uid);\n                    db.collection('users').doc(uid).set({\n                        email: email.value,\n                        emailVertified: true,\n                        name: name.value,\n                        plate: number.value\n                    });\n                }\n                this.setState({signedUp: true});\n            });\n        }\n        catch(error){\n            alert(error);\n        }\n    }\n    render(){\n        const { signedUp } = this.state;\n        return (<div id=\"sign_up\">\n                    <SignUpView onSubmit={this.handleSignUp} />\n                    {signedUp && <Redirect to='/home' /> }\n                </div>\n        );\n    }\n}\n\n\nclass PrivateRoute extends Component {\n    render(){\n        let { children, ...rest } = this.props;\n        let user = firebase.auth().currentUser;\n        return (\n            <Route\n                {...rest}\n                render={() =>\n                    user? (\n                    children\n                ) : (\n                    <Redirect\n                    to={{\n                        pathname: \"/sign_in\",\n                    }}\n                    />\n                )\n                }\n            />\n        );\n    }\n  }\n\n\nclass Navigation extends Component{\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {user: null};\n    // }\n    state = {loading:  true, authenticated: false, currentUser: null};\n    logOutUser = ()=>{\n       \n        firebase.auth().signOut();\n        // this.setState({user:null})\n    }\n\n    componentWillMount(){\n        firebase.auth().onAuthStateChanged(user => {\n            if(user){\n                this.setState({\n                    authenticated: true,\n                    currentUser: user,\n                    loading: false\n                });\n            }\n            else{\n                this.setState({\n                    authenticated: false,\n                    currentUser: null,\n                    loading: true\n                });\n            }\n        })\n    }\n\n    render(){ \n        const {currentUser} = this.state;\n        \n        return(\n            <Router>\n                <div id=\"nav\">\n                <Menu inverted pointing attached>\n                    <Menu.Item as={Link} name='home' to='/home'/>\n                    <Menu.Item as={Link} name='my meter' to='/my_meter'/>\n                    <Menu.Menu position='right'>\n                        {currentUser != null && <Menu.Item as={Link} name={'User'} to='/settings'/>}\n                        {currentUser != null && <Menu.Item as={Link} name='Logout' to='/home' onClick={this.logOutUser}/>}\n                        {(currentUser == null) && <Menu.Item as={Link} name='Sign-up' to='/sign_up'/>}\n                        {(currentUser == null) && <Menu.Item as={Link} name='Sign-in' to='/sign_in'/>}\n                    </Menu.Menu>\n                </Menu>\n                </div>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <Route path=\"/home\">\n                        <Home/>\n                    </Route>\n                    <PrivateRoute  path=\"/my_meter\">\n                        <MyMeter/>\n                    </PrivateRoute>\n                    <PrivateRoute path=\"/settings\">\n                        <Settings/>\n                    </PrivateRoute>\n                    <Route path=\"/sign_in\">\n                        <SignInScreen/>\n                    </Route>\n                    <Route path=\"/sign_up\">\n                        <SignUpScreen/>\n                    </Route>\n                </Switch>\n            </Router>\n        )\n    }\n}\nclass App extends Component{\n  \n    render() {\n        return (\n            <div id=\"App\">\n                <Navigation/>\n            </div>\n        )\n    }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/map.97cc4c06.png\";"],"sourceRoot":""}